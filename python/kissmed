#!/usr/bin/env python3

import sys, os
import time

sys.path.append(os.path.join(os.path.realpath(os.path.dirname(__file__)), '../'))
sys.path.append(os.path.join(os.path.realpath(os.path.dirname(__file__)), '../share/pyshared'))

from kmm import LedColor,InputEventType, KmmInputEventWorker
from kmm.pi import KmmPi
from relayboard import RelayBoard
from kissmpd import KissMPD
from kisskodi import KissKodi

from enum import Enum
class Mode(Enum):
    (init, standby, music, video, console) = range(5)

from threading import Timer
from threading import Lock
class KissMe:
    def __init__(self):
        self.fp = KmmPi(debug=False)
        self.rb = RelayBoard()
        self.kmpd = KissMPD(self.fp)
        self.kkodi = KissKodi(self.fp)
        self.__mode = Mode.init
        self.idle = True
        self.shutdown_timer = None
        self.__lock = Lock()
        self.luz = False

        self.kmpd.connect()
        kiew = KmmInputEventWorker(self.fp, self.inputevent_received)
        self.fp.clear()
        self.fp.set_text('{:^12}'.format('KissMe'))
        kiew.start()

    mode2relay = {
        Mode.init: [
        ],
        Mode.standby: [
            ('all', False)
        ],
        Mode.music: [
            ('amplifier', True),
            ('switch', True),
            ('tv', False),
            ('wii', False),
        ],
        Mode.video: [
            ('amplifier', True),
            ('switch', True),
            ('tv', True),
            ('wii', False),
        ],
        Mode.console: [
            ('amplifier', False),
            ('switch', False),
            ('tv', True),
            ('wii', True),
        ],
    }

    mode2text = {
        Mode.standby: '-- ',
        Mode.music: 'Musique',
        Mode.video: 'Video',
        Mode.console: 'Console',
    }

    def get_mode(self):
        self.__lock.acquire()
        mode = self.__mode
        self.__lock.release()
        return mode

    def set_mode(self, mode):
        self.__lock.acquire()
        if(mode != self.__mode):
            for state in self.mode2relay[mode]:
                self.rb.set(state[0], state[1])

            if(mode == Mode.music):
                self.kmpd.play()
            else:
                self.kmpd.pause()

            if(self.__mode == Mode.video): # WAS video
                self.kkodi.stop()

            self.__mode = mode

            self.fp.clear()
            if(mode == Mode.standby):
                self.fp.set_power_led(LedColor.red)
                self.idle = True
            else:
                self.set_idle(False)
                self.fp.set_flash_text(20, '{:^12}'.format(self.mode2text[mode]))

        self.__lock.release()
        time.sleep(1)
        self.refresh_display()

    def set_idle(self, idle):
        if(idle != self.idle):
            if(idle):
                self.fp.set_power_led(LedColor.orange)
                self.shutdown_timer = Timer(300, self.set_mode, [Mode.standby])
                self.shutdown_timer.start()
            else:
                self.fp.set_power_led(LedColor.green)
                if self.shutdown_timer:
                    self.shutdown_timer.cancel()
                self.shutdown_timer = None
            self.idle = idle

    def refresh_display(self):
        mode = self.get_mode()
        if mode == Mode.music:
            self.kmpd.refresh()
        elif mode == Mode.video:
            self.fp.set_text('{:^12}'.format(self.mode2text[mode]))

    key2mode = {
        'red': Mode.music,
        'green': Mode.video,
        'yellow': Mode.console,
        'power': Mode.standby,
    }

    def toggle_luz(self):
        if(self.luz == True):
            self.luz = False
        else:
            self.luz = True

        self.rb.set('luz', self.luz)
        self.fp.set_symbol_antenna(self.luz)

    def inputevent_received(self, ie):
        try:
            target_mode = self.key2mode[ie.key]
        except:
            target_mode = None

        mode = self.get_mode()
        if(ie.key == 'power') and (mode == Mode.standby) and (ie.type == InputEventType.pressed):
            target_mode = Mode.music
            self.set_mode(target_mode)
            return

        if(ie.key == 'blue') and (ie.type == InputEventType.pressed):
            self.toggle_luz()
            return

        print(ie)
        if(target_mode != None):
            if(ie.type == InputEventType.pressed):
                self.fp.set_scrolling_text(1, 99, self.mode2text[target_mode])
            elif(ie.type == InputEventType.released):
                self.refresh_display()
            elif(ie.duration > 1):
                self.set_mode(target_mode)
        else:
            if(mode == Mode.music):
                self.kmpd.handle_inputevent(ie)
            elif(mode == Mode.video):
                self.kkodi.handle_inputevent(ie)

    def mainloop(self):
        while True:
            time.sleep(0.5)
            change = self.kmpd.process()
            if(not change):
                continue
            mode = self.get_mode()
            if(mode == Mode.standby):
                if(change == 'play'):
                    self.set_mode(Mode.music)
            elif(mode == Mode.music) and ((change == 'stop') or (change == 'pause')):
                self.set_idle(True)
            elif(change):
                self.set_idle(False)

if __name__ == "__main__":
    km = KissMe()
    km.set_mode(Mode.music)
    km.mainloop()

