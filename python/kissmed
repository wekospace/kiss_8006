#!/usr/bin/env python3

import sys, os
import time

sys.path.append(os.path.join(os.path.realpath(os.path.dirname(__file__)), '../'))
sys.path.append(os.path.join(os.path.realpath(os.path.dirname(__file__)), '../share/pyshared'))

from kmm import LedColor,InputEventType, KmmInputEventWorker
from kmm.pi import KmmPi
from relayboard import RelayBoard
from kissmpd import KissMPD

from enum import Enum
class Mode(Enum):
    (init, standby, music, video, console) = range(5)

from threading import Timer
class KissMe:
    def __init__(self):
        self.fp = KmmPi(debug=False)
        self.rb = RelayBoard()
        self.kmpd = KissMPD(self.fp)
        self.mode = Mode.init
        self.idle = True
        self.shutdown_timer = None

        self.kmpd.connect()
        kiew = KmmInputEventWorker(self.fp, self.inputevent_received)
        self.fp.clear()
        self.fp.set_text('{:^12}'.format('KissMe'))
        kiew.start()

    mode2relay = {
        Mode.init: [
        ],
        Mode.standby: [
            ('all', False)
        ],
        Mode.music: [
            ('switch', True),
            ('tv', False),
        ],
        Mode.video: [
            ('switch', True),
            ('tv', True),
        ],
    }

    mode2text = {
        Mode.standby: '-- ',
        Mode.music: 'Musique',
        Mode.video: 'Video',
    }

    def set_mode(self, mode):
        if(mode != self.mode):
            self.mode = mode
            for state in self.mode2relay[mode]:
                self.rb.set(state[0], state[1])

            if(mode == Mode.music):
                self.kmpd.play()
            else:
                self.kmpd.pause()

            self.fp.clear()
            if(mode == Mode.standby):
                self.fp.set_power_led(LedColor.red)
                self.idle = True
            else:
                self.set_idle(False)
                self.fp.set_flash_text(20, '{:^12}'.format(self.mode2text[mode]))
                time.sleep(1)

            self.refresh_display()

    def set_idle(self, idle):
        if(idle != self.idle):
            if(idle):
                self.fp.set_power_led(LedColor.orange)
                self.shutdown_timer = Timer(120, self.set_mode, [Mode.standby])
                self.shutdown_timer.start()
            else:
                self.fp.set_power_led(LedColor.green)
                if self.shutdown_timer:
                    self.shutdown_timer.cancel()
                self.shutdown_timer = None
            self.idle = idle

    def refresh_display(self):
        if self.mode == Mode.music:
            self.kmpd.refresh()
        else:
            self.fp.clear()

    key2mode = {
        'red': Mode.music,
        'green': Mode.video,
        'power': Mode.standby,
    }

    def inputevent_received(self, ie):
        key2function = {
            'volume_down'    : self.kmpd.volume_down,
            'volume_up'      : self.kmpd.volume_up,
            'stop'           : self.kmpd.stop,
            'play'           : self.kmpd.play_pause,
            'next_track'     : self.kmpd.next,
            'previous_track' : self.kmpd.previous,
            'right'          : self.kmpd.next,
            'left'           : self.kmpd.previous,
            'down'           : self.kmpd.volume_down,
            'up'             : self.kmpd.volume_up,
            'ok'             : self.kmpd.play_pause,
            'mute'           : self.kmpd.play_pause,
        }

        try:
            mode = self.key2mode[ie.key]
        except:
            mode = None

        if(ie.key == 'power') and (self.mode == Mode.standby) and (ie.type == InputEventType.pressed):
            mode = Mode.music
            self.set_mode(mode)
            return

        print(ie)
        if(mode != None):
            if(ie.type == InputEventType.pressed):
                self.fp.set_scrolling_text(1, 99, self.mode2text[mode])
            elif(ie.type == InputEventType.released):
                self.refresh_display()
            elif(ie.duration > 1.5):
                self.set_mode(mode)
        else:
            if(ie.type == InputEventType.hold):
                if(ie.key == 'volume_down'):
                    self.kmpd.volume_down()
                elif(ie.key == 'volume_up'):
                    self.kmpd.volume_up()
                elif(ie.key == 'down'):
                    self.kmpd.volume_down()
                elif(ie.key == 'up'):
                    self.kmpd.volume_up()
            elif(ie.type == InputEventType.pressed):
                try:
                    function = key2function[ie.key]
                except:
                    function = None
                if(function):
                    function()

    def mainloop(self):
        while True:
            time.sleep(0.5)
            change = self.kmpd.process()
            if(self.mode == Mode.standby) and (change == 'play'):
                set_mode(Mode.music)
            elif(self.mode == Mode.music) and ((change == 'stop') or (change == 'pause')):
                self.set_idle(True)
            elif(change):
                self.set_idle(False)

if __name__ == "__main__":
    km = KissMe()
    km.set_mode(Mode.music)
    km.mainloop()

